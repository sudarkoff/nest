#!/bin/bash

PATH=/bin:/usr/bin:/usr/sbin:/usr/local/bin

SITE_YAML=/usr/local/nest/site.yaml

green='\e[1;32m'  # green
red='\e[1;31m'    # red
off='\e[0m'       # reset

function setStatusMessage {
    printf "${IRed} --> ${green}$1${off}\n" 1>&2
}

function triggerError {
    printf "${red} --> $1 ${off}\n" 1>&2
    exit 1
}

function exists {
    if command -v $1 >/dev/null 2>&1
    then
        return 0
    else
        return 1
    fi
}

# https://github.com/boxcutter/osx/blob/master/script/xcode-cli-tools.sh
function install_clt {
    # Get and install Xcode CLI tools
    OSX_VERS=$(sw_vers -productVersion | awk -F "." '{print $2}')

    # on 10.9+, we can leverage SUS to get the latest CLI tools
    if [ "$OSX_VERS" -ge 9 ]; then
        # create the placeholder file that's checked by CLI updates' .dist code
        # in Apple's SUS catalog
        touch /tmp/.com.apple.dt.CommandLineTools.installondemand.in-progress
        # find the CLI Tools update
        PROD=$(softwareupdate -l | grep "\*.*Command Line" | head -n 1 | awk -F"*" '{print $2}' | sed -e 's/^ *//' | tr -d '\n')
        # install it
        softwareupdate -i "$PROD"
        rm /tmp/.com.apple.dt.CommandLineTools.installondemand.in-progress

    # on 10.7/10.8, we instead download from public download URLs, which can be found in
    # the dvtdownloadableindex:
    # https://devimages.apple.com.edgekey.net/downloads/xcode/simulators/index-3905972D-B609-49CE-8D06-51ADC78E07BC.dvtdownloadableindex
    else
        [ "$OSX_VERS" -eq 7 ] && DMGURL=http://devimages.apple.com.edgekey.net/downloads/xcode/command_line_tools_for_xcode_os_x_lion_april_2013.dmg
        [ "$OSX_VERS" -eq 7 ] && ALLOW_UNTRUSTED=-allowUntrusted
        [ "$OSX_VERS" -eq 8 ] && DMGURL=http://devimages.apple.com.edgekey.net/downloads/xcode/command_line_tools_for_osx_mountain_lion_april_2014.dmg

        TOOLS=clitools.dmg
        curl "$DMGURL" -o "$TOOLS"
        TMPMOUNT=`mktemp -d /tmp/clitools.XXXX`
        hdiutil attach "$TOOLS" -mountpoint "$TMPMOUNT"
        installer $ALLOW_UNTRUSTED -pkg "$(find $TMPMOUNT -name '*.mpkg')" -target /
        hdiutil detach "$TMPMOUNT"
        rm -rf "$TMPMOUNT"
        rm "$TOOLS"
        exit
    fi
}

setStatusMessage "Check if we need to ask for a sudo password"
sudo -v

setStatusMessage "Keep-alive: update existing sudo time stamp until we are finished"

while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &

if [[ ! -f "/Library/Developer/CommandLineTools/usr/bin/clang" ]]; then
    setStatusMessage "Install the CLT"
    install_clt
fi

if ! exists pip; then
    setStatusMessage "Install PIP"
    sudo easy_install --quiet pip
fi
if ! exists ansible; then
    setStatusMessage "Install Ansible"
    sudo pip install -q ansible
fi

setStatusMessage "Create necessary folders"
sudo touch /var/log/ansible.log
sudo chmod g+rw /var/log/ansible.log
sudo chgrp admin /var/log/ansible.log

setStatusMessage "Create ansible.cfg"
{ echo '[defaults]'; echo 'roles_path=/usr/local/nest/roles:/usr/local/nest/config/roles'; echo 'log_path=/var/log/ansible.log'; } > ansible.cfg

setStatusMessage "Run the playbook"
ansible-playbook -i "localhost," site.yaml
